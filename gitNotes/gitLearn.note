0.git是分布式版本控制系统
1.config:
    git config --global user.name "you name"
    git config --global user.email "email@example.com"
    --global :用了这个参数，表示机器上所有的git仓库都会使用这个配置
2.创建仓库
    repository:版本库　仓库
    目录里的文件都被git管理起来
    １.创建一个空目录
    ２.运行 git init,将目录变成git可以管理的仓库
    (pwd 查看当前目录)
    .git目录用于跟踪版本管理
    使用ls -ah 可以查看隐藏的目录
3.命令
    1.git add filename 添加到git仓库,可以多次使用，添加多个文件
    提交文件修改的时候，也需要运行add命令
    2.git commit -m "comment" 提交到仓库。会一次行提交很多文件
    3.git status 查看仓库当前状态(和版本库对比的状态)
    4.git diff 查看不同(本地和版本库对比的不同)
        git diff commit_id -- filename 查看版本库中和工作区中的区别
        eg.
        git diff HEAD -- readme.txt
4.版本回退
    1.git log 查看版本的log
        git log --pretty=oneline 一行显示log
    2.HEAD表示当前版本，HEAD^表示上个版本，HEAD^^表示上上个版本，以此类推. HEAD~100表示上100个版本.
    3.git reset --hard HEAD^[commit_id]　表示版本回退到哪个版本
        HEAD指针指向哪个版本
    4.git reflog 记录每一次的命令。如果回退到某个版本后，后悔了，又想回到最新的版本，使用reflog查看log，查找commit id.
        commit_id 形如:HEAD@{X}
5.工作区和暂存区
    本地仓库目录，是工作区，
    .git目录是版本库，其中有暂存区（stage或者index),和git自动创建的第一个分支master,以及指向master的一个指针叫HEAD. 
    git add 将文件添加到暂存区
    git commit 提交更改将暂存区内容提交到当前分支
6.git管理的是修改而不是文件
    每add一次，其实是将修改放入暂存区
    每commit一次，是将暂存区的内容同步到版本库
    因此
        修改１
        add
        修改２
        commit
    修改2的东西并不会提交到版本库，因为没有加入到暂存区中
7.git checkout -- filename 撤销修改
    如果本地修改还没有放入暂存区，本地会撤销为和版本库一模一样
    如果本地修改已经add到暂存区，会撤销add
    !! --　很重要，如果没有--，命令会变为“切换到另一个分支”
8.删除文件
    rm filename         在文件管理器中删除文件
    git rm -- filename  将删除修改提交到暂存区
    git commit -m 'xx'  将修改提交到版本库

    rm filename
    git checkout --filename 恢复上一次的命令/删除操作。(or 从版本库中迁出文件)
9.远程仓库
    1.检查是否已经有ssh key了:
        在用户主目录下，查看是否有.ssh目录，如果有，查看目录下是否有id_rsa和id_rsa.pub文件
        如果没有，创建ssh key:
        ssh-keygen -t rsa -C 'youremail@example.com'
        id_rsa为私钥，id_rsa.pub为公钥
    2.github配置
        登录github->Account settings->ssh keys
        ->add ssh key   填写任意title ,在文本框里粘贴id_rsa.pub文件内容
        ->add key
10.添加远程仓库    
    1.登录github->create a new repo
    2.可以从这个仓库克隆新的仓库，也可以吧一个已有的本地仓库与之关联，然后吧本地仓库的内容推送到github仓库
    在本地仓库下运行命令,添加远程库名字为origin：
    git remote add origin git@github.com:YourName/yourRepo.git
    第一次把本地库的所有内容推送到远程库上：
    git push -u origin master
    git push -u <本地库> <远程库>
    -u参数:git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来
    以后推送命令：
    git push origin master


        

:正则表达式                *正则表达式* 
http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386832260566c26442c671fa489ebc6fe85badda25cd000

一种描述性的语言，给字符串一个规则。符合规则的，就是"匹配"了
1.单个字符类型 (预定义字符集)
    \d      匹配一个数字
    \D      非数字 等于[^\d]
    \w      匹配一个字母或数数字
    \W      非单词字符 等于[^\w]
    \s      空白字符 等于[<space>\t\r\n\f\v]
    \S      非空白字符 等于[^\s]
    .       任意字符
    

2.字符数量
    *       0个或多个（任意个）     >=0
    +       1个或多个               >=1
    ?       0个或一个               <=1
    {n}     n个                     =n
    {n,m}   n到m个                  >=n,<=m

3.精确匹配
    []          表示范围
    [^x]        不包含x.在[]中，^后表示不包含
                eg.
                [0-9a-zA-Z\_]   数字、字母或者下划线


    |           或     
                eg.
                A|B         匹配A或B
    ^           行开头
    $           行结束
    \A          仅匹配字符串开头
    \Z          仅匹配字符串末尾
    \b          匹配\w和\W之间
    \B          [^\b]
    ()          分组，便于提取匹配结果
    ?           在匹配的数量后加?表示非贪婪匹配，即尽量少的匹配
                eg. \d+?

4.python re模块
    re模块: 包含所有正则表达式的功能
    \用于转义python本身的字符 eg. 正则表达式需要的字符串为 'ABC-001',
        s='ABC\\-001'
        或
        s=r'ABC\-001'
    加了r前缀，就不需要考虑python字符串的转义问题了

    1.re.match 匹配
    match()方法判断是否匹配成功，如果成功，返回一个Match对象，否则返回None

    import re
    re.match(r'^\d{3}\-\d{3,8}$','010-12345')
    2.re.split 字符串切分
    >>> re.split(r'\s+','a b   c')
    >>> ['a','b','c']
    
    2.Match.group Match对象分组
    使用()对正则表达式进行分组。在返回的匹配结果中，可以通过.group(index)进行提取
    :group(0)   为原始字符
    :group(n)   表示第n个子串
    :groups()   返回子串的list
    eg.
    m=re.match(r'^(\d{3})\-(\d{3,8})$','010-12345')
    m.group(0)      '010-12345'
    m.group(1)      '010'
    m.group(2)      '12345'
    m.groups()      ('010','12345')

    3.re.compile 编译
    使用正则表达式时，re模块会做两件事情：
        1.编译正则表达式，如果正则表达式本身不合法，就会报错
        2.用编译后的正则表达式去匹配字符串
    所以，使用re.compile先将要多次使用的正则表达式编译，省略之后的编译步骤。
    eg.
    re_teltphone=re.compile(r'^(\d{3})\-(\d{3,8})$','010-12345')
    re_teltphone.match('010-12345').groups()
    ...

